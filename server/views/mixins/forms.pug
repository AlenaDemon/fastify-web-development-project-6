- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3.position-relative(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
      placeholder=" "
    )&attributes(attributes)
    label.floating-label(
      for=inputId
    )= t(`views.users.${propertyName}`)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, options = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-select' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .input-group.mb-3
    label.input-group-text(for=inputId)= t(`views.tasks.${propertyName}`)
    select(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      option(value="") 
      each option in options
        option(
          value=option.value
          selected=_.get(entity, propertyName) === Number(option.value)
        )= option.label
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin checkbox(entity, propertyName, label, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - inputId = getInputId(propertyName)
  .mb-3.form-check
    input.form-check-input(
      type="checkbox"
      id=inputId
      name=getInputName(propertyName)
      checked=_.get(entity, propertyName)
    )
    label.form-check-label(for=inputId)= label

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3
    label(for=inputId)= t(`views.tasks.${propertyName}`)
    textarea(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      rows="3"
    )= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin multiselect(entity, propertyName, options = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3
    label(for=inputId)= t(`views.tasks.${propertyName}`)
    select(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      multiple="multiple"
    )&attributes(attributes)
      each option in options
        option(
          value=option.value
          selected=Array.isArray(_.get(entity, propertyName)) 
            ? _.get(entity, propertyName).includes(Number(option.value)) 
            : _.get(entity, propertyName) === Number(option.value)
        )= option.label
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')


mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
